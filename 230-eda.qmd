---
title: "Exploratory Data Analysis"
subtitle: "It is important to understand what you can do before you learn to measure how well you seem to have done it. (John Tukey)"
author: "Otho Mantegazza"
editor_options:  
  chunk_output_type: console
---

## 

![](img/tukey-boxplot.jpg){.absolute top=0 right=0 height="750"}

::: {.caption .rev .absolute right=850 bottom=0}

BOXPLOT

Year: 1977

Author: John Tukey

Book: Exploratory Data Analysis

*The Boxplot is one of the main visual models used to explore data. It shows Summary Quantile Statistics and outlier for a stratified set of data.* 

:::

## Exploratory Data Analysis

:::: {.columns}

::: {.column width="45%"}
### Investigative Work 

Exploratory data analysis, as stated by Tukey, is the investigative work on data.

When you explore data, you leave no stone unturned. Relying on graphical methods, robust summary statistic and dimension reduction, you quickly gain insights in all possible patterns, correlations and cause-effect relationships that are in the data. In technical terms, you generate hypothesis.


:::

::: {.column width="45%"}
### Confirmation

After you have done your investigative work, you should switch from inspector to judge and test your hypothesis with inference and tests.

But there's no point in testing the statistical relevance of poorly formulated hypotheses. Exploratory Data Analysis is fundamental in modern statistics, because it allows to formulate the best hypothesis possible.
:::

::::

## Visual Immediacy

:::: {.columns}

::: {.column width="45%"}

When you explore data, you have to turn them into insightful formats. Most of the time this involves turning data into grafical and visual shapes.

:::

::::

##

![](img/tukey-stem-and-leaf.jpg){.absolute top=0 left=350 height="700"}

::: {.caption .rev .absolute right=700 bottom=0}

STEM AND LEAF

Year: 1977

Author: John Tukey

Book: Exploratory Data Analysis

*A graphical intuitive representation of car prices.*

A big part Tukey's book "Exploratory Data Analysis" relies on graphical representation of data that you can draw yourself with pen and paper. Luckily today you can use powerful software designed for data exploration purpose, such as the [Tidyverse](https://www.tidyverse.org/). 

:::

## Semantics

:::: {.columns}

::: {.column width="45%"}

If you want to represent data intuitively, first you have to learn terms that allow you to describe the structure of a dataset semantically.

The [Tidy Data Theory](https://tidyr.tidyverse.org/articles/tidy-data.html) lets us do just that.

::: 

::::

##

![](img/tidy-data-theory.jpg ){.absolute top=50 left=0 width="1000"}

::: {.caption .absolute left=0 bottom=0}

::: {.columns}

::: {.column width="31%"}

TIDY DATA THEORY

Year: 2014

Author: Hadley Wickham

Paper: [Tidy Data](https://doi.org/10.18637/jss.v059.i10)

:::

::: {.column width="31%"}

*A common framework to organize data semantically: if you organize data based on their structure, it's easier for you to make sense of them, to realize what data you have and what's missing.*

*If you organize data with a common framework, it's also easier to share them with others.*

:::
::: {.column width="30%"}

- Each column is a variable.
- Each row is an observation.
- Each cell is a value.
- Each dataset is one observational unit.
:::

:::

:::

## Exploratory Data Analysis

::: {.columns}

::: {.column width="31%"}


- Visualize

- Summarize

- Stratify 

- Transform

https://r4ds.hadley.nz/eda

:::

::: {.column width="33%"}

```{python}
# all functions to manipulate data
import pandas as pd

# Seaborn Object Interface
import seaborn.objects as so

# The palmer penguins dataset;
# that we are going to use for practice
from palmerpenguins import load_penguins
penguins = load_penguins()
```



:::

:::

## One variable summaries

## Histogram

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
      data = penguins,
      x = 'bill_depth_mm'
  )
  .add(
    so.Bar(),
    so.Hist()
  )
  .layout(size=(5, 6))
)
```

## Histogram

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
      data = penguins,
      x = 'bill_depth_mm'
  )
  .add(
    so.Bars(),
    # The number of bins is arbitrary
    # different bins can highlight
    # different patterns  or noise
    so.Hist(bins = 30)
  )
  .layout(size=(5, 6))
)
``` 

## Histogram

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
      data = penguins,
      x = 'bill_depth_mm',
      # You can stratify
      # by sex
      color = 'sex'
  )
  .add(
    so.Bars(),
    so.Hist(bins = 30),
    so.Stack()
  )
  .layout(size=(5, 6))
)
```

## Histogram

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
      data = penguins,
      x = 'bill_depth_mm',
      # You can stratify
      # by sex
      color = 'sex'
  )
  .add(
    so.Bars(),
    so.Hist(bins = 30),
    so.Stack()
  )
  # and by species
  .facet(row = "species")
  .layout(size=(5, 6))
)
```

## Exercise 

::: {.columns}

::: {.column width="50%"}

Describe an histogram in terms of the grammar of graphics.

Which step do you have to define explicitely? Which step are defined implicitely by ggplot2?

:::

:::

## Stripchart

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
      data = penguins,
      x = 'bill_depth_mm',
      y = 'species'
  )
  .add(
    so.Dots()
  )
  .layout(size=(5, 6))
)
```

## Stripchart

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "5-7"
(
  so.Plot(
      data = penguins,
      x = 'bill_depth_mm',
      y = 'species'
  )
  .add(
    so.Dots(),
    # jitter the points
    # to reduce overplotting
    so.Jitter()

  )
  .layout(size=(5, 6))
)
```

## Stripchart

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "5-7"
(
  so.Plot(
      data = penguins,
      x = 'bill_depth_mm',
      y = 'species'
  )
  .add(
    so.Dots(),
    so.Jitter()
  )
  # Show the median
  .add(
    so.Dash(),
    so.Agg('median')
  )
  .layout(size=(5, 6))
)
```

## Stripchart

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "5-7"
(
  so.Plot(
      data = penguins,
      x = 'bill_depth_mm',
      y = 'species',
      # stratify by sex
      color = 'sex'
  )
  .add(
    so.Dots(),
    so.Jitter(),
    so.Dodge()
  )
  .add(
    so.Dash(),
    so.Agg('median'),
    so.Dodge()
  )
  .layout(size=(5, 6))
)
```

## Two variables

Lets's use the diamonds dataset.

```{python}
from seaborn import load_dataset
diamonds = load_dataset('diamonds')
```

## Scatterplot

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    data = diamonds,
    x = 'x',
    y = 'price'
  )
  .add(
    so.Dot(alpha = .05)
  )
  .layout(size=(5, 6))
)
```

## Scatterplot

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    # remove points with
    # unlikely values
    data = diamonds.query(
      'x > 0'
      ),
    x = 'x',
    y = 'price'
  )
  .add(
    so.Dot(alpha = .05)
  )
  .layout(size=(5, 6))
)
```

## Scatterplot

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    data = diamonds.query(
      'x > 0'
      ),
    x = 'x',
    y = 'price'
  )
  .add(
    so.Dot(
      alpha=0.01
    )
  )
  # add a data summary
  .add(
    so.Line(
      color = '#000000'
      ),
    so.PolyFit(
      order = 2
      )
  )
  .layout(size=(5, 6))
)
```

## Scatterplot

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    data = diamonds.query(
      'x > 0'
      ),
    x = 'x',
    y = 'price'
  )
  .add(
    so.Dot(
      alpha=0.01
    )
  )
  .add(
    so.Line(
      color = '#000000'
      ),
    so.PolyFit(
      order = 2
      )
  )
  # use limits to cut fit
  .limit(y = (0, 20000))
  .layout(size=(5, 6))
)
```

## Scatterplot

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    data = diamonds.query(
      'x > 0'
      ),
    x = 'x',
    y = 'price'
  )
  .add(
    so.Dot(
      alpha=0.01
    )
  )
  .add(
    so.Line(
      color = '#000000'
      ),
    so.PolyFit(
      order = 2
      )
  )
  .facet(
    row="cut",
    wrap = 3
  )
  .limit(y = (0, 20000))
  .layout(size=(5, 6))
)
```

## Exercise

::: {.columns}

::: {.column width="50%"}

Describe the faceted scatterplot, that you can find on the previous page) in terms of the grammar of graphics.

How many layers are there?

Which step do you have to define explicitely? Which step are defined implicitely by ggplot2?

:::

:::

## Residual Plot

::: {.columns}

::: {.column width="47%"}


We can use statistical models to transform data and to make more evident, visually, the patterns contained in the data.

We can also use visual exploration of the output of statistical model, to see if the model fit the data properly.

:::

::: {.column width="47%"}

```{python}
import statsmodels.formula.api as smf
```

:::

:::

## Residual Plot

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    data=penguins,
    x='bill_length_mm',
    y='bill_depth_mm'
  )
  .add(
    so.Dots(),
    color = 'sex'
  )
  .add(
    so.Line(),
    so.PolyFit(order = 1)
  )
  .facet(
    row = 'species',
    wrap = 2
    )
  .layout(size=(5, 6))
)
```

## Residual Plot

```{python}
#| output-location: column
# We can define a model
# before plotting
fit = smf.ols(
    'bill_depth_mm ~ bill_length_mm + species + bill_length_mm*species',
      data = penguins
).fit()

penguins_fit = (
  penguins
    .assign(
      fitted_bill_depth = fit.fittedvalues,
      residuals = lambda x: x.bill_depth_mm - x.fitted_bill_depth
    )
  )
```

## Residual Plot

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    data=penguins_fit,
    x='bill_length_mm',
    y='residuals'
  )
  .add(
    so.Dots(),
    color = 'sex'
  )  
  .add(
    so.Line(),
    so.PolyFit(order = 1)
  )
  .facet(
    row = 'species',
    wrap = 2
    )
  .layout(size=(5, 6))
)
```

## Seaborn Standard Interface

Some visual model are not yet implemented in the object interface. 

To make heatmaps or pair plots we have to use Seaborn's standard API.

```{python}
import seaborn as sns
```

## Heatmap

Heatmap are useful to explore dense datasets, with high change of overplotting.

In a heatmap we map a numerical value to a color. Heatmaps can be used both with categorical x and y axes, or binned continous axes

## Heatmap

```{python}
#| output-location: column
#| classes: "side-fig"
```

## Heatmap

```{python}
#| output-location: column
#| fig-width: 5
#| fig-height: 6
#| code-line-numbers: "21-27" 
d_fit <- linear_reg() %>% 
  fit(price ~ poly(x, 2),
      data = d_clean) %>% 
  augment(new_data = d_clean)

# We can use models to trans-
# form data and inspect
# patterns
d_fit %>% 
  ggplot() +
  aes(x = x,
      y = .resid) +
  stat_bin2d(
    aes(
      fill = after_stat(count)
    ),
    geom = 'tile'
  ) +
  geom_hline(yintercept = 0,
             colour = 'blue') +
  # use colors intuitively
  scale_fill_viridis_c(
    direction = -1,
    option = 'G',
    guide = guide_colorbar(
      barwidth = 15
    ))
```

## Pairs

```{python}
library(GGally)
```

## Pairs

```{python}
#| output: false
#| fig-width: 12
#| fig-height: 10
diamonds %>%
  ggpairs(
    lower = list(
      continuous = wrap(
        "points", alpha = 0.05
      )
    )
  )
```

## 

![](230-eda_files/figure-revealjs/pairs-1.jpeg){.absolute top=5 left=50 height="800"}

## Exercise - Detective Hat

:::: {.columns}

::: {.column width="45%"}

*A very bad criminal organization, have hidden a message for one of his hitmen in [this file](https://github.com/othomantegazza/dataviz-for-scientists-slides/blob/main/data/secret-message.csv).*

*You have intercepted the file, but you must decode the message. You don't have much time to stop a catastrophe. Work fast!*

More details in the next page →

:::

::::

## Exercise - Detective Hat

:::: {.columns}

::: {.column width="80%"}

The aim of this exercise is to let you practice making many exploratory graphs, quickly. 

Visualize the content of [this dataset](https://github.com/othomantegazza/dataviz-for-scientists-slides/blob/main/data/secret-message.csv) in different ways, until you find the secret message. Be fast, you have a lot of data to explore.

Be essential. You, right here, right now, are the only person that needs to undestand these graphs. Do not waste your time making the graphs nicer, change only what you need to change to understand them better.

Show the data. The message is often well hidden, if you summarize the data too much, they might get lost.

:::

::::


<!--- js dependencies -->
<script src="https://d3js.org/d3.v7.min.js"></script>
<script src="js/fix-figures.js"></script>
