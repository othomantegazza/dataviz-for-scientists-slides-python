---
title: "Better Graphs - I"
subtitle: "How to use graphical variables effectively."
author: "Otho Mantegazza"
editor_options:  
  chunk_output_type: console
---

##

![](img/1967-bertin-retinal-variables.jpg){.absolute top=0 left=0 width="1000"}

::: {.caption .absolute left=760 top=340}

AUTHOR: Jaques Bertin

YEAR: 1967

BOOK: The Semiology of Graphics

*Examples of planar and retinal variables.*

:::

## Graphical Variables

::: {.columns}

::: {.column width="45%"}

When you draw a data visualization on a two dimensional screen, you map values from data variables to graphical variables:

- Planar Variables: *x, y*.
- Retinal Variables: *colour hue, color value, shape, orientation, size, area, texture*.

In terms of the grammar of graphics, the graphical variables are the aesthetics that you map yor data to.

:::

:::

## Planar Variables

::: {.columns}

::: {.column width="45%"}

The x and y planar variables are largely perceived as a quantitative linear space. And they are great for representing **quantitative** and **qualitative** data.

The planar variables are the x and y coordinates on your planar screen, which readily translate to the x and y positions in your graph.

(f you use cartesian coordinates or to a transformed version of them if you use more elaborate coordinate systems)

![](img/planar-variables.png){.absolute top=110 left=500 width=600}

:::

:::

## Planar Variables

::: {.columns}

::: {.column width="45%"}

You can place **qualitative** variables both in the x and y variable. In this case the x might stop being the independent variable, and the y stops being the response.

Often there is no clear hypothetical relationship of cause effect between two variables, in that case you can invert the x and the y freely.

:::

:::

![](img/planar-variables-categorical.png){.absolute top=110 left=500 width=600}

## Retinal Variables

::: {.columns}

::: {.column width="45%"}


The retinal variables are all those other graphical variables, that cannot be interpreted directly as a position on the screen's x and y.

The most important retinal variables are *colour hue, color value, shape, orientation, size, area, texture*. 

Each one has its own peculiarities and its own rules about how it can be used best.

:::

:::

## Colour

::: {.columns}

::: {.column width="45%"}

Colours can be mapped both to categorical and continuous variables.

With some caveats, colours are a multidimensional space:

- Not perceived in a fully linear way.
- Perceived in different ways by different people.

:::

:::

![](img/retinal-variables-colours-1.png){.absolute top=110 left=500 width=500}

## Color Spaces

::: {.columns}

::: {.column width="45%"}

If you find it hard to plan colours, don't worry, colours are complex for everyone.

On a screen, colours are **defined** as [three hexadecimal strings](https://duckduckgo.com/?q=color+picker), that combine 256 levels of red, green and blue.

:::

:::

![](img/color-hex.png){.absolute top=110 left=550}

## Color Spaces

::: {.columns}

::: {.column width="45%"}

Colors are perceived non linearly, and the model of how colors are perceived by people gets constantly updated. The most used model is [CIECAM02](https://en.wikipedia.org/wiki/CIECAM02).

What shoud interest you is:

- HUE: what we call colour.
- LIGHTNESS: how close to black?
- SATURATION: how close to gray?


:::

:::

![](img/hue-lightness-saturation.png){.absolute top=135 left=550}

## Categorical Variables

::: {.columns}

::: {.column width="45%"}

You can use colours to encode for categorical variables.

If the categorical variable is not ordered you should modulate the colors hue, with also small changes to saturation and lightness.

Always check if your colour palette is accessible by colour blind people.

:::

:::

![](img/retinal-v-color-categorical.png){.absolute top=110 left=500 width=550 style="z-index: -1;"}

## Continous Variables

::: {.columns}

::: {.column width="45%"}

Using colours to encode continuous variables is somehow easier.

- Check that your colour palette is colour-blind friendly.
- Check that lightness and saturation change consistently with the data.
- You can modulate the hue resembling colours of natural phenomena; such as clouds, sunsets, rivers...

:::

:::

![](img/retinal-variables-colours-1.png){.absolute top=110 left=500 width=500 style="z-index: -1;"}

## Colour Perception

![](img/colour-blind-perception.png){.absolute top=100 left=0}

::: {.absolute left=0 bottom=70}

::: {.columns}

::: {.column width="49%"}

If you check that your palette are friendly to colour blind people, you can also detect unwanted patterns perception patterns.

:::

::: {.column width="45%"}

You can use [Firefox accessibility tools](https://firefox-source-docs.mozilla.org/devtools-user/accessibility_inspector/simulation/index.html) to simulate colour blind perception.

:::

:::

:::

## Good Colour Palettes

![](img/colour-palette-categorical.png){.absolute top=170 left=0}
![](img/colour-palette-continuous.png){.absolute top=170 left=485}

::: {.columns}

::: {.column width="45%"}
### Categorical

<br>

<br>

In categorical palettes, you should be able to distinguish colours, even in small plotting characters.

Check if colours are different, even when plotted in black and white. Otherwise consider using and additional graphical variable to encode the information.

:::

::: {.column width="45%"}
### Quantitative

<br>

<br>

Continuous colour palette should be perceived linearly and univocally throughout the spectra. Check that this is true also for color blindness and black and white.

You should handle **ordered categorical variables** as if they were quantitative, not categorical.


:::

:::

## Good Colour Palettes

::: {.columns}

::: {.column width="45%"}

Remember, data viusalization is processed intuitively by the readers.

Colours have meaning. Don't represent ice coverage in red, don't represent the warming of the ocean in blue, ask yourself if your colour palette is appropriate for the topic your data are about.

:::

:::

## Colours in Python

![](img/colour-paletteer-tokyo.png){.absolute top=0 left=500 style="z-index: -1;"}

::: {.columns}

::: {.column width="45%"}

There are plenty of colour palette available in Python though Seaborn or other tools, so it's unlikely that you'll have to design your own.

It's more likely that you'll have to be able to choose a good one.

The [Seaborn's tutorial](https://seaborn.pydata.org/tutorial/color_palettes.html) on how to choose a colour palette, is a great place to start.

Look also at [Matplotlib's palette guide](https://matplotlib.org/stable/tutorials/colors/colormaps.html), and at the blog post presenting the [viridis](https://bids.github.io/colormap/) and [batlow](https://www.fabiocrameri.ch/colourmaps/) perceptually uniform color maps. 

:::

:::


##

![](img/2018-warming_stripes-ed-hawkins.png){.absolute top=0 left=0}

::: {.caption .absolute left=0 bottom=0}

::: {.columns}

::: {.column width="31%"}

WARMING STRIPES

Year: 2018

Author: Ed Hawkins

Source: [Climate Lab Book](https://en.wikipedia.org/wiki/File:20181204_Warming_stripes_(global,_WMO,_1850-2018)_-_Climate_Lab_Book_(Ed_Hawkins).png)

:::

::: {.column width="31%"}

*Researcher Ed Hawkins was searching for an intuitive way to represent global warming.*

*He designed the concept of climate stripes, removing everything that's not a direct mapping of data from an heatmap of average temperature.*

:::
::: {.column width="31%"}

On the x axis, each stripe is a year, from the year when the first data recording is available reliably.

The colour represents the relative change in temperature.

The y axis is not mapped to the data.

:::

:::

:::

## Exercise

Check the climate stripes with a tool to simulate colour blind vision. Are the climate stripes colour blind friendly? Motivate your anwser.


## Colours in Seaborn

::: {.columns}

::: {.column width="45%"}

Seaborns has many function to explore, set and generate color palettes:

- [set_palette()](https://seaborn.pydata.org/generated/seaborn.set_palette.html) to set a color palette.
- [color_palette()](https://seaborn.pydata.org/generated/seaborn.color_palette.html#seaborn.color_palette) to explore the existing color palettes, or to build new ones.

:::

:::

## Colors in Seaborn

```{python}
# All functions to manipulate data
import pandas as pd

# Seaborn Object Interface
import seaborn.objects as so
# and other Seaborn functions
import seaborn as sns

# The palmer penguins dataset;
# that we are going to use for practice
from palmerpenguins import load_penguins
penguins = load_penguins()

# The diamonds dataset
from seaborn import load_dataset
diamonds = load_dataset('diamonds')
```

## Colours in Seaborn - Continuous

```{python}
#| output-location: column
#| classes: "side-fig"

# set the right size for the figure
sns.set(
  rc={
    'figure.figsize':(5,6)
  })

sns.histplot(
  data=(diamonds
    .query('carat <= 3')),
  x='carat',
  y='price',
  cbar=True
)
```

## Colours in Seaborn - Continuous

```{python}
#| output-location: column
#| classes: "side-fig"

# set the right size for the figure
sns.set(
  rc={
    'figure.figsize':(5,6)
  })

sns.histplot(
  data=(diamonds
    .query('carat <= 3')),
  x='carat',
  y='price',
  cbar=True,
  # change color palette
  cmap='dark:#0A9_r'
)
```

## Colours in Seaborn - Categorical

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    data = penguins,
    x = 'bill_length_mm',
    y = 'bill_depth_mm',
    color = 'species'
 )
 .add(
  so.Dot()
 )
 .layout(size=(5, 6))
)
```

## Colours in Seaborn - Categorical

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    data = penguins,
    x = 'bill_length_mm',
    y = 'bill_depth_mm',
    color = 'species'
 )
 .add(
  so.Dot()
 )
 # Set the color scale manually
 .scale(color = [
  '#007a49',
  '#fdcb55',
  '#3f98d4'
 ])
 .layout(size=(5, 6))
)
```

## Shape 

![](img/shapes-examples.png){.absolute top=110 left=500  style="z-index: -1;"}

::: {.columns}

::: {.column width="45%"}

You can use [marker shapes](https://seaborn.pydata.org/tutorial/properties.html) to encode **categorical** information.

Shapes are simple and easy to understand.

They can't be used to represent quantitative data. They could be used for ordered categorical data, but I'd advise against this practice.

:::

:::

## Shape

```{python}
#| eval: false
#| classes: "side-fig"
(
  so.Plot(
    data = penguins,
    x = 'bill_length_mm',
    y = 'bill_depth_mm',
    marker = 'species'
 )
 .add(
  so.Dot()
 )
 .layout(size=(5, 6))
)
```


![](img/retinal-shapes.png){.absolute top=110 left=500 width=550 style="z-index: -1;"}

## Shape

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    data = penguins,
    x = 'bill_length_mm',
    y = 'bill_depth_mm',
    marker = 'species'
 )
 .add(
  so.Dot()
 )
 # map markers manually
 .scale(
  marker = [
    'o',
    '^',
    's'
  ]
 )
 .layout(size=(5, 6))
)
```

## Shape

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    data = penguins,
    x = 'bill_length_mm',
    y = 'bill_depth_mm',
    marker = 'species'
 )
 .add(
  # empty shapes  
  so.Dot(
    fill = False,
    stroke = 1.5
    )
 )
 .scale(
  marker = [
    'o',
    '^',
    's'
  ]
 )
 .layout(size=(5, 6))
)
```

## Shape

```{python}
#| output-location: column
#| classes: "side-fig"
(
  so.Plot(
    data = penguins,
    x = 'bill_length_mm',
    y = 'bill_depth_mm',
    marker = 'species',
    # double encode species
    # with shape and colour
    color = 'species'
 )
 .add(
  so.Dot(
    stroke = 1.5,
    fill = False
    ),
 )
 .scale(
  marker = [
    'o',
    '^',
    's'
  ],
  color = [
  '#007a49',
  '#fdcb55',
  '#3f98d4'
 ]
 )
 .layout(size=(5, 6))
)
```

## Size and Area

::: {.columns}

::: {.column width="45%"}

Linear size and area are often mapped to quantitative values, such as absolute measurements and percentages.

Size is often used together with colour to display a quantiative value stratified by a qualitative factor.

:::

:::

## Size - Bar Chart

```{python}
#| output-location: column
#| classes: "side-fig"
# color and clarity of diamonds
# are ordered categorical 
# variables
(
  so.Plot(
    data = diamonds,
    y = 'color',
    color = 'clarity'
  )
  .add(
    so.Bars(),
    so.Count(),
    so.Stack()
  )
  .layout(size=(5, 6))
)
```


## Size - Bar Chart

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "4-8"
(
  so.Plot(
    data = diamonds,
    y = 'color',
    color = 'clarity'
  )
  .add(
    so.Bars(),
    so.Count(),
    so.Stack()
  )
  # map the ordered variable
  # "clarity" to an ordered
  # color scale
  .scale(color = 'flare')
  .layout(size=(5, 6))
)
```

## Size - Bar Chart

```{python}
#| output-location: column
#| classes: "side-fig"
# Map additional variables
(
  so.Plot(
    data = diamonds,
    y = 'color',
    color = 'clarity'
  )
  .add(
    so.Bars(),
    so.Count(),
    so.Stack()
  )
  .scale(
    color = 'flare'
    )
  .facet(
    row = 'cut',
    wrap = 3
  )
  .layout(size=(5, 6))
)
```

## Size - Bar Chart

::: {.columns}

::: {.column width="47%"}

When we use a barolot, we  map the data to the length of the bars, not to the area.

The area of the bars is directly proportional to the data values.

Though, conceptually, if we would be mapping the data to  the bars' area instead of their length, we could no represent negative values.

:::

:::

## Area - Pie Chart

::: {.columns}

::: {.column width="47%"}


To make a pie chart in Python we have to use, instead of seaborn, the old interface of [Pyplot](https://matplotlib.org/stable/tutorials/introductory/pyplot.html).

```{python}
import matplotlib.pyplot as plt
```

:::

:::

## Area - Pie Chart

```{python}
#| output-location: column
#| classes: "side-fig"
# count diamonds by clarity
counts = (diamonds
    .query('color == "J"')
    .groupby('clarity')
    .size())

# transform to percent
perc = (counts.values/
        counts.values.sum())
labels = counts.index

# define a color palete of the 
# same length of the data
colors = sns.color_palette(
  'viridis', 
  n_colors = perc.size
  )

# plot the py chart
plt.pie(
  perc,
  labels = labels, 
  colors = colors, 
  autopct='%.0f%%'
  )
```

## Area - Pie Chart

::: {.columns}

::: {.column width="45%"}

Pie charts get a bad reputation for not being a nuanced analytical graphs.

But pie charts are effective at representing percentages, and they outscore barcharts when the number of slices is high.

Can you describe the pie chart from the previous page in terms of the grammar of graphics?

:::

:::

## Area of Circles and Shapes

![](img/retinal-variable-circle-area.svg){.absolute top=110 left=500 width=450}

::: {.columns}

::: {.column width="45%"}

You can encode a continuous variable in the area of the circles in a scatterplot, or in the area the plotting character of your choice.

Our perception is not as good at comparing areas, so use this retinal variable with parsimony.

You can map data to the radius of circles or to the area directly. Mapping data to the area directly might be slightly better, although neither chioice is optimal, 

:::

:::

## Radius of Circles

```{python}
#| output-location: column
#| classes: "side-fig"
# by default seaborn maps
# the magnitude of the
# data to the diameter of
# the circles
(
  so.Plot(
    data = planets,
    x = 'distance',
    y = 'orbital_period',
    pointsize = 'mass'
  )
  .add(
    so.Dots()
  )
  .scale(
    x = 'log',
    y = 'log'
  )
  .layout(size=(5, 6))
)
```

## Area As Uncertainty

::: {.columns}

::: {.column width="45%"}

A light coloured area is often used to encode for a measurement of uncertainty or dispersion of the data.

For example, the confidence interval of a regression model, or the prediction of how a natural phenomena will evolve in space and time.

How to represent uncertainty intuituvely, is an active field of research.

:::

:::

## Area As Uncertainty

```{python}
#| output-location: column
#| classes: "side-fig"
sns.lmplot(
  data = penguins,
  x = 'body_mass_g',
  y = 'flipper_length_mm'
)
```

## Area As Uncertainty

```{python}
#| output-location: column
#| classes: "side-fig"
# a spurious correlation
# with higher uncertainty
sns.lmplot(
  data = penguins,
  x = 'bill_length_mm',
  y = 'bill_depth_mm'
)
```

## Area As Uncertainty

```{python}
#| output-location: column
#| classes: "side-fig"
# That improves if we
# stratify the data 
# by species
sns.lmplot(
  data = penguins,
  x = 'bill_length_mm',
  y = 'bill_depth_mm',
  hue = 'species'
)
```


## Area As Uncertainty

![](img/uncertainty-area.jpg){.absolute top=140 left=500 width=500}

##

![](img/uncertainty-cone.jpg){.absolute top=0 left=0 width=700}

::: {.caption .absolute left=730 top=0}

HURRICANE PROBABILITY CONE

Year: Current

Website: [NOAA - Hurricane Center](https://www.nhc.noaa.gov/aboutcone.shtml)

*The cone shows the forcasted path of the hurricane, from its current position. The size of the cone grows with the uncertainty in the path's forecast*

There's evidence that we intuitively associate the size of the cone to the forecasted size of the hurricane, not to the uncertainty of its path.

:::

## Area As Uncertainty

::: {.columns}

::: {.column width="45%"}

How to represent uncertainty is an active area of research.

You can check [Dr. Lace Padilla's Work](https://psyarxiv.com/ebd6r/), for an overview of the best practices and the latest findings.

:::

:::

## Orientation

![](img/orientation.jpg){.absolute top=140 left=700}

::: {.columns}

::: {.column width="45%"}

The orientation of plotting characters is used to show the vectorial orientation of dimensions such as wind or other types of movements on a map.

The orientation of plotting characters is often used combined with their length, to show intensity and direction.

:::

:::

## Orientation

![](img/orientation.jpg){.absolute top=140 left=700}

::: {.columns}

::: {.column width="45%"}

In ggplot there is no way to control the orientation of a plotting character directly. So you'll have to use a segments, calculating their start and end points from data.

:::

:::

## Orientation

```{python}
#| output-location: column
#| fig-width: 5
#| fig-height: 6
#| code-line-numbers: "4,6-24"
load('data/wind.data.RData')
wind <- wind.data
rm(wind.data)
wind %>%
  filter(lon > -7) %>%
  ggplot() +
  aes(
    x = lon,
    y = lat,
    xend = (
      lon + cos(
        dir*pi/180
      )/5
    ),
    yend = (
      lat + sin(
        dir*pi/180
      )/5
    )
  ) +
  geom_segment(
    arrow = arrow(
      length = unit(1, 'mm')
    )
  ) +
  scale_x_continuous(
    expand = expansion(
      mult = c(.01, .01))
  ) +
  scale_y_continuous(
    expand = expansion(
      mult = c(.01, .01))
  ) +
  coord_map() +
  theme(
    plot.margin = margin(
      0, 0, 0, 0
    )
    )
```

## Orientation and Size

```{python}
#| output-location: column
#| fig-width: 5
#| fig-height: 6
#| code-line-numbers: "8,13"
wind %>%
  filter(lon > -7) %>%
  ggplot() +
  aes(
    x = lon,
    y = lat,
    xend = (
      lon + speed*cos(
        dir*pi/180
      )/20
    ),
    yend = (
      lat + speed*sin(
        dir*pi/180
      )/20
    )
  ) +
  geom_segment(
    arrow = arrow(
      length = unit(1, 'mm')
    )
  ) +
  scale_x_continuous(
    expand = expansion(
      mult = c(.01, .01))
  ) +
  scale_y_continuous(
    expand = expansion(
      mult = c(.01, .01))
  ) +
  coord_map() +
  theme(
    plot.margin = margin(
      0 ,0 ,0, 0
    )
  )
```

## Orientation and Size

![](img/orientation-labels.svg){.absolute top=130 left=0 width=400}
![](310-better-graphs_files/figure-revealjs/orientation-size-1.jpeg){.absolute top=110 left=550 width=500}

## Texture

::: {.columns}

::: {.column width="45%"}

The texture is often used to distinguish various types of lines.

It can also be used to fill shapes in a semiquantitative way. This aspect fell in disuse, but it can be a good choice for printer-friendly visualization.

:::

:::


