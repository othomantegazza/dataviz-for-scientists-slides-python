---
title: "Better Graphs II"
subtitle: "Show the data. Declutter. Foster intuition. Know your audience."
author: "Otho Mantegazza _ Dataviz For Scientists _ Part 3.2"
editor_options:  
  chunk_output_type: console
---

##


![](img/ggmaplot-3.jpg){.absolute top=0 left=0}

::: {.caption .absolute left=0 bottom=0}

::: {.columns}

::: {.column width="31%"}

MA PLOT

Source: [ggpubr](https://rpkgs.datanovia.com/ggpubr/index.html)

Field: Omics Disciplines

:::

::: {.column width="31%"}

*A highly specialized diagnostic visual model used in the omics disciplines.*



*He designed the concept of climate stripes, removing everything that's not a direct mapping of data from an heatmap of average temperature.*

:::
::: {.column width="31%"}

On the x axis, each stripe is a year, from the year when the first data recording is available reliably.

The colour represents the relative change in temperature.

The y axis is not mapped to the data.

:::

:::

:::

## Communicating to Others

::: {.columns}

::: {.column width="50%"}

When you explore your data, your goal should be to produce, quickly, as many graphs as possible, to gain insights.

When you want to communicate results to other, you goal should be to make as few graphs as possible that convey a message to your audience in a clear and informative way.

As a scientist, the most likely scenario would be that you are communicating very complex results to an highly educated and informed audience.

:::

:::

## Keep in Mind

::: {.columns}

::: {.column width="50%"}

1. Show the data (as much as you can).
2. Declutter.
3. Use intuition.
4. Know your audience's expectations.

:::

:::

## Show the Data

::: {.columns}

::: {.column width="47%"}

Load all the libraries that we need.

:::

::: {.column width="47%"}

```{python}
# All functions to manipulate data
import pandas as pd

# Seaborn Object Interface
import seaborn.objects as so
# and other Seaborn functions
import seaborn as sns

# The palmer penguins dataset;
# that we are going to use for practice
from palmerpenguins import load_penguins
penguins = load_penguins()

# The diamonds dataset
from seaborn import load_dataset
diamonds = load_dataset('diamonds')
```

:::

:::

## Show the Data

::: {.columns}

::: {.column width="50%"}

You should use graphs to deliver a message to your audience.

When you do it, show as many details of the data as you can. In this way you'll provide precious information to your audience.

If you have to hide your data behind a statistical transformation, use one which is as simple as possible.

:::

:::

## Show the Data

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "1-13"
# Do we even need a graph
# to show a point estimate?
(
    so.Plot(
      penguins, 
      x="sex", 
      y="body_mass_g")
    .add(
      so.Bar(), 
      so.Agg(
        func = "mean"
      )
    )
    .layout(
      size=(5, 6)
    )
)
```

## Show the Data

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "1-5,17-24"
# showing mean and 
# confidence interval
# is generally accepted,
# but it still hides most
# of the information
(
    so.Plot(
      penguins, 
      x="sex", 
      y="body_mass_g")
    .add(
      so.Bar(), 
      so.Agg(
        func = "mean"
      )
    )
    .add(
      so.Range(
        color = '#000'
      ), 
      so.Est(
        errorbar=("ci", 95)
      ),
    )
    .layout(
      size=(5, 6)
    )
)
```

## Show the Data

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "1-3,9-14"
# We can use a simpler
# visual model to show 
# point estimates
(
    so.Plot(
      penguins, 
      x="sex", 
      y="body_mass_g")
    .add(
      so.Dot(), 
      so.Agg(
        func = "mean"
      )
    )
    .add(
      so.Range(
        color = '#000'
      ), 
      so.Est(
        errorbar=("ci", 95)
      ),
    )
    .layout(
      size=(5, 6)
    )
)
```

## Show the Data

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "1-4,13,21"
# Simpler statistics are
# easier to understand
# and less likely to be
# misinterpreted
(
    so.Plot(
      penguins, 
      x="sex", 
      y="body_mass_g")
    .add(
      so.Dot(), 
      so.Agg(
        func = "median"
      )
    )
    .add(
      so.Range(
        color = '#000'
      ), 
      so.Est(
        errorbar=("pi", 50)
      ),
    )
    .layout(
      size=(5, 6)
    )
)
```

## Show the Data

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "1-4,10-13"
# Only when if we show all
# data points we can see
# that the penguins body weight 
# follows a bimodal distribution
(
    so.Plot(
      penguins, 
      x="sex", 
      y="body_mass_g")
    .add(
      so.Dots(), 
      so.Jitter(.5)
    )
    .add(
      so.Dot(
        pointsize = 10,
        color = 'black',
        fill = False,
        stroke = 2
      ), 
      so.Agg(
        func = "median"
      )
    )
    .add(
      so.Range(
        color = '#000'
      ), 
      so.Est(
        errorbar=("pi", 50)
      ),
    )
    .layout(
      size=(5, 6)
    )
)
```


## Show the Data

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "1-4,10"
# If we use colour to stratify
# different penguins species 
# tend to have a different 
# body mass
(
    so.Plot(
      penguins, 
      x="sex", 
      y="body_mass_g",
      color = "species"
    )
    .add(
      so.Dots(), 
      so.Jitter(.5)
    )
    .add(
      so.Dot(
        pointsize = 10,
        color = 'black',
        fill = False,
        stroke = 2
      ), 
      so.Agg(
        func = "median"
      )
    )
    .add(
      so.Range(
        color = '#000'
      ), 
      so.Est(
        errorbar=("pi", 50)
      ),
    )
    .layout(
      size=(4, 6)
    )
)
```

## Show the Data

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "1-4,33"
# We can use facets to further
# separate the species and
# make the graphics clearer
(
    so.Plot(
      penguins, 
      x="sex", 
      y="body_mass_g",
      color = "species")
    .add(
      so.Dots(), 
      so.Jitter(.5)
    )
    .add(
      so.Dot(
        pointsize = 10,
        color = 'black',
        fill = False,
        stroke = 2
      ), 
      so.Agg(
        func = "median"
      )
    )
    .add(
      so.Range(
        color = '#000'
      ), 
      so.Est(
        errorbar=("pi", 50)
      ),
    )
    .facet(col = 'species')
    .layout(
      size=(4, 6)
    )
)
```

## Show as Much Data as You Can

::: {.columns}

::: {.column width="50%"}

Show the data is a good mindset to make informative plots.

Though, for the sake of clarity and simplicity, you might decide to hide some of the raw data behind statistical transformation.

It's up to you to find the balance between detail and simplicity that suits your audience.

:::

:::


## Show as Much Data as You Can

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: ""
# In this case overplotting 
# saturates the plot
(
  so.Plot(
   data = diamonds.query(
      'carat < 3', 
      ),
    x = 'carat',
    y = 'price'
  )
  .add(
    so.Dots()
  )
  .layout(
    size=(5, 6)
  )
)
```
 
## Show as Much Data as You Can

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "1-2,13"
# We can use transparency 
# to overcome overplotting a bit
(
  so.Plot(
   data = diamonds.query(
      'carat < 3', 
      ),
    x = 'carat',
    y = 'price'
  )
  .add(
    so.Dot(
      alpha = .01
    )
  )
  .layout(
    size=(5, 6)
  )
)
```

## Show as Much Data as You Can

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "1-4,6-17,29-49"
# But, to help the reader,
# I would add a statistical 
# transformation over the data
# Showing mean and IQR range

diamonds_binned = (
  diamonds
    .query(
      'carat < 3'
    )
    .assign(
      carat_bin = lambda x: round(
        x.carat, 1
      )
  )
)

(
  so.Plot(
   data = diamonds_binned,
    x = 'carat',
    y = 'price'
  )
  .add(
    so.Dot(
      alpha = .005
    )
  )
  .add(
    so.Dot(
      pointsize = 4,
      color = 'black',
      fill = False,
      stroke = 2
    ), 
    so.Agg(
      func = "median"
    ),
    x = 'carat_bin'
  )
  .add(
    so.Range(
      color = '#000'
    ), 
    so.Est(
      errorbar=("pi", 50)
    ),
    x = 'carat_bin'
  )
  .layout(
    size=(5, 6)
  )
)
```

## Show as Much Data as You Can

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: "1-2"
# Should we hide the data
# completely?

diamonds_binned = (
  diamonds
    .query(
      'carat < 3'
    )
    .assign(
      carat_bin = lambda x: round(
        x.carat, 1
      )
  )
)

(
  so.Plot(
   data = diamonds_binned,
    x = 'carat',
    y = 'price'
  )
  .add(
    so.Dot(
      pointsize = 4,
      color = 'black',
      fill = False,
      stroke = 2
    ), 
    so.Agg(
      func = "median"
    ),
    x = 'carat_bin'
  )
  .add(
    so.Range(
      color = '#000'
    ), 
    so.Est(
      errorbar=("pi", 50)
    ),
    x = 'carat_bin'
  )
  .layout(
    size=(5, 6)
  )
)
```

## Show as Much Data as You Can

```{python}
#| output-location: column
#| classes: "side-fig"
#| code-line-numbers: ""

# Otherwise we can swich to a
# different vislal model

sns.set(
  rc={
    'figure.figsize':(4.5,6)
  })

sns.histplot(
  data=(diamonds
    .query('carat <= 3')),
  x='carat',
  y='price',
  cbar=True
);
```

## Show the Data

::: {.columns}

::: {.column width="50%"}

Your graph should deliver a message.

While delivering this message, you should provide as much information as possible, showing the data.

If your graph gets too crowded, feel free to hide some of the data behind a statistical transformation.

Graphs are processed intuitively by your audience, be sure not to mislead them.

:::

:::

## Declutter

::: {.columns}

::: {.column width="50%"}

Keep your message in front. 

One of the main mindset for decluttering a graph is the "data to ink ratio" concept, developed by [E. Tufte](https://en.wikipedia.org/wiki/Edward_Tufte).

According to it, most ink in your graph should be used to represent data.

:::

:::

##

![](img/tufte-data-to-ink.jpg){.absolute top=0 left=370 height="700"}

::: {.caption .rev .absolute right=710 bottom=0}

DATA TO INK RATIO

Year: 1826

Author: [Edward Tufte](https://en.wikipedia.org/wiki/Edward_Tufte).

*Edward Tufte shows that removing ink from axes and other graphical elements that are not directly mapped to the data, the message of the graph might become more evident.*

In [this choropleth map](https://commons.wikimedia.org/wiki/File:Carte_figurative_de_l'instruction_populaire_de_la_France.jpg), the darker the region the higher is the average education level.
:::


## Spatial organization, ordering

## Gestalt Prangranz


<!--- js dependencies -->
<script src="https://d3js.org/d3.v7.min.js"></script>
<script src="js/fix-figures.js"></script>
